import { NextApiRequest, NextApiResponse } from 'next';
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { userId } = req.body;

    if (!userId) {
      return res.status(400).json({ error: 'User ID is required' });
    }

    // Get user's subscription tier
    const { data: user } = await supabase
      .from('users')
      .select('subscription_tier')
      .eq('id', userId)
      .single();

    const userTier = user?.subscription_tier || 'starter';

    // Define limits
    const limits = {
      starter: 0,
      professional: 5,
      career_os: -1 // unlimited
    };

    const limit = limits[userTier as keyof typeof limits] || 0;

    // Get current month usage
    const monthStart = new Date();
    monthStart.setDate(1);
    monthStart.setHours(0, 0, 0, 0);

    const { count } = await supabase
      .from('ai_conversations')
      .select('*', { count: 'exact', head: true })
      .eq('user_id', userId)
      .gte('created_at', monthStart.toISOString());

    res.status(200).json({
      used: count || 0,
      limit,
      tier: userTier,
      remaining: limit === -1 ? -1 : Math.max(0, limit - (count || 0))
    });

  } catch (error) {
    console.error('Usage tracking error:', error);
    res.status(500).json({ error: 'Failed to get usage stats' });
  }
}